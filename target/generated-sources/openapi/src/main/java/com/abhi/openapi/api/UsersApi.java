/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.abhi.openapi.api;

import com.abhi.openapi.model.UpdateUser;
import com.abhi.openapi.model.User;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-03-29T21:27:48.925634-07:00[America/Los_Angeles]")
@Validated
@Api(value = "users", description = "the users API")
public interface UsersApi {

    default UsersApiDelegate getDelegate() {
        return new UsersApiDelegate() {};
    }

    /**
     * DELETE /users : Delete an existing user
     *
     * @return No Content (status code 204)
     */
    @ApiOperation(value = "Delete an existing user", nickname = "usersDelete", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content") })
    @DeleteMapping(
        value = "/users"
    )
    default ResponseEntity<Void> usersDelete() {
        return getDelegate().usersDelete();
    }


    /**
     * GET /users : Retrieve a list of users
     *
     * @return OK (status code 200)
     */
    @ApiOperation(value = "Retrieve a list of users", nickname = "usersGet", notes = "", response = User.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = User.class, responseContainer = "List") })
    @GetMapping(
        value = "/users",
        produces = { "application/json" }
    )
    default ResponseEntity<List<User>> usersGet() {
        return getDelegate().usersGet();
    }


    /**
     * POST /users : Create a new user
     *
     * @param body  (required)
     * @return Created (status code 201)
     */
    @ApiOperation(value = "Create a new user", nickname = "usersPost", notes = "", response = User.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = User.class) })
    @PostMapping(
        value = "/users",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<User> usersPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Object body) {
        return getDelegate().usersPost(body);
    }


    /**
     * PUT /users : Update an existing user
     *
     * @param updateUser  (required)
     * @return No Content (status code 204)
     */
    @ApiOperation(value = "Update an existing user", nickname = "usersPut", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content") })
    @PutMapping(
        value = "/users",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> usersPut(@ApiParam(value = "" ,required=true )  @Valid @RequestBody UpdateUser updateUser) {
        return getDelegate().usersPut(updateUser);
    }


    /**
     * GET /users/{userkey} : Retrieve a single user by userkey
     *
     * @param userkey User key to retrieve (required)
     * @return OK (status code 200)
     */
    @ApiOperation(value = "Retrieve a single user by userkey", nickname = "usersUserkeyGet", notes = "", response = User.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = User.class) })
    @GetMapping(
        value = "/users/{userkey}",
        produces = { "application/json" }
    )
    default ResponseEntity<User> usersUserkeyGet(@ApiParam(value = "User key to retrieve",required=true) @PathVariable("userkey") Integer userkey) {
        return getDelegate().usersUserkeyGet(userkey);
    }

}
